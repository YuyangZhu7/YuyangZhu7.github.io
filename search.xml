<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>个人主页</title>
    <url>/2024/11/20/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Welcome to my <a href="yuyangzhu7.github.io">page</a>! 本篇将记录博主个人主页搭建的各种信息和相关方式，欢迎参考</p>
<span id="more"></span>

<h4 id="1-在标题前加入"><a href="#1-在标题前加入" class="headerlink" title="1.在标题前加入:"></a>1.在标题前加入:</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &quot;个人主页&quot;</span><br><span class="line">date: 2024-11-20</span><br><span class="line">author: 朱宇阳</span><br></pre></td></tr></table></figure>
<p>并前后行用“—”包裹,进行基本信息概括</p>
<h4 id="2-加入-以对过长部分进行收缩和展开"><a href="#2-加入-以对过长部分进行收缩和展开" class="headerlink" title="2.加入&lt;!–more–&gt; 以对过长部分进行收缩和展开"></a>2.加入&lt;!–more–&gt; 以对过长部分进行收缩和展开</h4><h4 id="3-hexo常见命令"><a href="#3-hexo常见命令" class="headerlink" title="3.hexo常见命令"></a>3.hexo常见命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">$ hexo generate   #生成静态文件。</span><br><span class="line">$ hexo server</span><br><span class="line">#启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span><br><span class="line">$ hexo d #部署网站，构建在GitHub的服务器中。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-d:                </span><br><span class="line">--deploy,文件生成后立即部署网站</span><br><span class="line">-w:</span><br><span class="line">--watch,监视文件变动</span><br><span class="line">-b:</span><br><span class="line">--bail,生成过程中如果发生任何未处理的异常则抛出异常</span><br><span class="line">-f</span><br><span class="line">:--force,强制重新生成文件. Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</span><br><span class="line">-c</span><br><span class="line">:--concurrency,最大同时生成文件的数量，默认无限制</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常使用：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p> 其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。 <code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写 <code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写 </p>
</blockquote>
<h4 id="4-使用主题"><a href="#4-使用主题" class="headerlink" title="4.使用主题"></a>4.使用主题</h4><p>主题为<strong>next</strong>，目录为**&#x2F;Desktop&#x2F;competition&#x2F;Yuyang_Zhu**</p>
<p>  blog文件夹（即根目录）下 <strong>themes文件夹，这个文件夹里面存放你下载的主题文件</strong>，可以看到next主题又再次包含一个文件夹，其中包含了next 主题的配置信息 </p>
<p>修改 博客的标题，副标题，描述，等等基本信息:在 blog根目录下打开 _config.yml 配置文件，直接修改即可</p>
<h4 id="5-参考学习链接："><a href="#5-参考学习链接：" class="headerlink" title="5.参考学习链接："></a>5.参考学习链接：</h4><p>Hexo+Next主题搭建个人博客+优化全过程（完整详细版）：<br><a href="https://zhuanlan.zhihu.com/p/618864711">https://zhuanlan.zhihu.com/p/618864711</a></p>
]]></content>
  </entry>
  <entry>
    <title>爬虫代码分享</title>
    <url>/2025/02/20/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p>Welcome to my <a href="yuyangzhu7.github.io">page</a>! 本篇将介绍几种博主曾经撰写的爬虫代码,原创代码欢迎参考</p>
<span id="more"></span>

<h3 id="1-知乎个人主页爬取"><a href="#1-知乎个人主页爬取" class="headerlink" title="1.知乎个人主页爬取"></a>1.知乎个人主页爬取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 进入浏览器设置</span></span><br><span class="line">options = Options()</span><br><span class="line"><span class="comment"># 设置中文</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;lang=zh_CN.UTF-8&#x27;</span>)</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"><span class="comment"># 更换头部</span></span><br><span class="line">options.add_argument(</span><br><span class="line">    <span class="string">&#x27;user-agent=&quot;Mozilla/5.0 (iPod; U; CPU iPhone OS 2_1 like Mac OS X; ja-jp) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.1 Mobile/5F137 Safari/525.20&quot;&#x27;</span>)</span><br><span class="line"><span class="comment"># get直接返回，不再等待界面加载完成</span></span><br><span class="line">desired_capabilities = DesiredCapabilities.CHROME</span><br><span class="line">desired_capabilities[<span class="string">&quot;pageLoadStrategy&quot;</span>] = <span class="string">&quot;none&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Service对象</span></span><br><span class="line">service = Service(<span class="string">&quot;D:/anaconda/Scripts/chromedriver.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化WebDriver</span></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/people/ta-mei-yu-zhi-jian-de-wen-rou/answers&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">page_sourse = driver.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment">#正则化处理提取回答链接</span></span><br><span class="line">a = <span class="string">&#x27;&lt;a target=&quot;_blank&quot; data-za-detail-view-element_name=&quot;Title&quot; href=&quot;(.*?)&quot;&gt;&#x27;</span></span><br><span class="line"><span class="comment">#正则化处理提取回答问题名和回答者id</span></span><br><span class="line">a2=<span class="string">&#x27;&lt;meta itemprop=&quot;name&quot; content=&quot;(.*?)&quot;&gt;&#x27;</span></span><br><span class="line"><span class="comment">#正则化处理提取回答赞同数</span></span><br><span class="line">a3=<span class="string">&#x27;&lt;span&gt;&lt;button aria-label=&quot;(.*?)&quot; aria-live=&quot;polite&quot; type=&quot;button&quot; class=&quot;Button VoteButton VoteButton--up FEfUrdfMIKpQDJDqkjte&quot;&gt;&#x27;</span></span><br><span class="line"><span class="comment">#正则化处理提取回答时间</span></span><br><span class="line">a5=<span class="string">&#x27;&lt;meta itemprop=&quot;dateModified&quot; content=&quot;(.*?)&quot;&gt;&#x27;</span></span><br><span class="line">a = re.findall(a, page_sourse)</span><br><span class="line">a2 = re.findall(a2, page_sourse)</span><br><span class="line">a3=re.findall(a3,page_sourse)</span><br><span class="line">a5=re.findall(a5,page_sourse)</span><br><span class="line">question_names=a2[<span class="number">0</span>::<span class="number">2</span>]</span><br><span class="line">author_ids=a2[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">time=a5</span><br><span class="line">answer_ids = [re.search(<span class="string">r&#x27;/answer/(\d+)&#x27;</span>, url).group(<span class="number">1</span>) <span class="keyword">for</span> url <span class="keyword">in</span> a]</span><br><span class="line">driver.quit()</span><br><span class="line"><span class="comment"># 通过下标访问数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(answer_ids)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ID[<span class="subst">&#123;i&#125;</span>] = <span class="subst">&#123;answer_ids[i]&#125;</span>&quot;</span>)<span class="comment">#输出回答id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = [(index, line.lstrip(<span class="string">&#x27;//&#x27;</span>)) <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(a, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">Line=[]<span class="comment">#回答链接列表</span></span><br><span class="line">answercontent=[]<span class="comment">#回答内容列表</span></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="keyword">for</span> index, line <span class="keyword">in</span> url:</span><br><span class="line">    Line.append(line)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义保存结果的文件名</span></span><br><span class="line">result_file = <span class="string">&#x27;zhihu_comments.csv&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空的DataFrame对象，用来存储所有的评论数据</span></span><br><span class="line">df_all = pd.DataFrame()</span><br><span class="line">comment_number=[]</span><br><span class="line"><span class="comment"># 循环遍历所有的回答id，通过第二种爬取方式获得评论内容</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(answer_ids)):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义目标回答的id</span></span><br><span class="line">    answer_id = answer_ids[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义存储数据的列表</span></span><br><span class="line">    comments = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义初始的偏移量</span></span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义循环标志</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构造请求url，根据偏移量和回答id</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">f&#x27;https://www.zhihu.com/api/v4/answers/<span class="subst">&#123;answer_id&#125;</span>/comments?include=data%5B*%5D.author%2Ccollapsed%2Creply_to_author%2Cdisliked%2Ccontent%2Cvote_count%2Cis_parent_author%2Cis_author&amp;order=normal&amp;limit=20&amp;offset=<span class="subst">&#123;offset&#125;</span>&amp;status=open&#x27;</span></span><br><span class="line">    <span class="comment"># 发送请求，获取响应</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 判断响应状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 解析响应数据为json格式</span></span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="comment"># 获取评论列表</span></span><br><span class="line">        comments_list = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        comment_count = data[<span class="string">&#x27;paging&#x27;</span>][<span class="string">&#x27;totals&#x27;</span>]</span><br><span class="line">        <span class="comment"># 判断评论列表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> comments_list:</span><br><span class="line">            <span class="comment"># 遍历评论列表，提取需要的字段</span></span><br><span class="line">            <span class="keyword">for</span> comment <span class="keyword">in</span> comments_list:</span><br><span class="line">                <span class="comment"># 获取评论id</span></span><br><span class="line">                comment_id = comment[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                <span class="comment"># 获取评论内容</span></span><br><span class="line">                content = comment[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">                <span class="comment"># 获取评论作者的姓名</span></span><br><span class="line">                author_name = comment[<span class="string">&#x27;author&#x27;</span>][<span class="string">&#x27;member&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">                <span class="comment"># 获取评论作者的性别，0为女，1为男，-1为未知</span></span><br><span class="line">                author_gender = comment[<span class="string">&#x27;author&#x27;</span>][<span class="string">&#x27;member&#x27;</span>][<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">                <span class="comment"># 获取评论的点赞数</span></span><br><span class="line">                vote_count = comment[<span class="string">&#x27;vote_count&#x27;</span>]</span><br><span class="line">                <span class="comment"># 获取评论的创建时间，为10位时间戳</span></span><br><span class="line">                created_time = datetime.utcfromtimestamp(comment[<span class="string">&#x27;created_time&#x27;</span>])<span class="comment">#时间处理函数，将时间戳处理为24小时制时间</span></span><br><span class="line">                <span class="comment"># 获取评论id属地</span></span><br><span class="line">                address_text = comment[<span class="string">&#x27;address_text&#x27;</span>]</span><br><span class="line">                <span class="comment">#获取评论者id</span></span><br><span class="line">                author_id = comment[<span class="string">&#x27;author&#x27;</span>][<span class="string">&#x27;member&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                <span class="comment"># 将提取的字段组成一个字典，添加到数据列表中</span></span><br><span class="line">                comments.append(&#123;</span><br><span class="line">                    <span class="string">&#x27;回答id&#x27;</span>:answer_ids[i],</span><br><span class="line">                    <span class="string">&#x27;评论id&#x27;</span>: comment_id,</span><br><span class="line">                    <span class="string">&#x27;评论内容&#x27;</span>: content,</span><br><span class="line">                    <span class="string">&#x27;昵称&#x27;</span>: author_name,</span><br><span class="line">                    <span class="string">&#x27;性别&#x27;</span>: author_gender,</span><br><span class="line">                    <span class="string">&#x27;点赞数&#x27;</span>: vote_count,</span><br><span class="line">                    <span class="string">&#x27;评论时间&#x27;</span>: created_time,</span><br><span class="line">                    <span class="string">&#x27;ip属地&#x27;</span>: address_text,</span><br><span class="line">                    <span class="string">&#x27;用户id&#x27;</span>:author_id</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;已爬取<span class="subst">&#123;comment_count&#125;</span>条评论&#x27;</span>)</span><br><span class="line">            comment_number.append(comment_count)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果评论列表为空，说明没有更多数据，结束循环</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            comment_count=<span class="number">0</span></span><br><span class="line">            comment_number.append(comment_count)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;已爬取<span class="subst">&#123;comment_count&#125;</span>条评论&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果响应状态码不为200，说明请求出错，结束循环</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个问题爬取完成&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将每次爬取的评论数据转换为DataFrame对象</span></span><br><span class="line">    df = pd.DataFrame(comments)</span><br><span class="line">    <span class="comment"># 使用concat函数将其拼接到总的DataFrame对象中</span></span><br><span class="line">    df_all = pd.concat([df_all, df], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">len</span>(answer_ids)-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(answer_ids)):</span><br><span class="line">            url1 = <span class="string">f&#x27;https://<span class="subst">&#123;Line[i]&#125;</span>&#x27;</span></span><br><span class="line">            response1 = requests.get(url1, headers=headers)</span><br><span class="line"></span><br><span class="line">            soup = BeautifulSoup(response1.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            answer_content = [p.get_text() <span class="keyword">for</span> p <span class="keyword">in</span> soup.select(<span class="string">&#x27;span.RichText.ztext.CopyrightRichText-richText.css-olurbu p&#x27;</span>)]</span><br><span class="line">            answercontent.append(answer_content)</span><br><span class="line"><span class="comment"># 将总的DataFrame对象一次性保存为csv文件</span></span><br><span class="line">df_all.to_csv(result_file, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印保存结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;评论内容已保存为<span class="subst">&#123;result_file&#125;</span>&#x27;</span>)</span><br><span class="line">data=<span class="built_in">list</span>(<span class="built_in">zip</span>(answer_ids,a,question_names,author_ids,a3,time,comment_number,answercontent))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;answer.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> csvfile:</span><br><span class="line">    csv_writer=csv.writer(csvfile)</span><br><span class="line">    csv_writer.writerow([<span class="string">&#x27;回答id&#x27;</span>,<span class="string">&#x27;回答网址&#x27;</span>,<span class="string">&#x27;问答问题名&#x27;</span>,<span class="string">&#x27;回答者昵称&#x27;</span>,<span class="string">&#x27;赞同数&#x27;</span>,<span class="string">&#x27;回答时间&#x27;</span>,<span class="string">&#x27;评论数量&#x27;</span>,<span class="string">&#x27;回答内容&#x27;</span>])</span><br><span class="line">    csv_writer.writerows(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;博主回答内容已保存为answer.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h3 id="2-京东商铺爬取"><a href="#2-京东商铺爬取" class="headerlink" title="2.京东商铺爬取"></a>2.京东商铺爬取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumOptions</span><br><span class="line">path =<span class="string">r&#x27;&quot;C:/Program Files/Google/Chrome/Application/chrome.exe&quot;&#x27;</span></span><br><span class="line">ChromiumOptions().set_browser_path(path).save()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"><span class="keyword">from</span> DrissionPage.common <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;data2.csv&#x27;</span>,mode=<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">csv_writer=csv.DictWriter(f,fieldnames=[    </span><br><span class="line">    <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;链接&#x27;</span>,])</span><br><span class="line">csv_writer.writeheader()</span><br><span class="line"></span><br><span class="line">dp=ChromiumPage()</span><br><span class="line">dp.get(<span class="string">&#x27;https://www.jd.com/&#x27;</span>)</span><br><span class="line">dp.ele(<span class="string">&#x27;css:#key&#x27;</span>).<span class="built_in">input</span>(<span class="string">&#x27;郫县豆瓣酱&#x27;</span>)</span><br><span class="line">dp.ele(<span class="string">&#x27;css:#key&#x27;</span>).<span class="built_in">input</span>(Keys.ENTER)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经爬取到了第&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;页\n&#x27;</span>)</span><br><span class="line">    dp.scroll.to_bottom()</span><br><span class="line">    lis=dp.eles(<span class="string">&#x27;css:.gl-item&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#dp.scroll.down(50)</span></span><br><span class="line">            title=li.ele(<span class="string">&#x27;css:.p-name a em&#x27;</span>).text</span><br><span class="line">            price=li.ele(<span class="string">&#x27;css:.p-price i&#x27;</span>).text</span><br><span class="line">            href=li.ele(<span class="string">&#x27;css:.p-name a&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;li.ele(&#x27;css:.p-name a em&#x27;).click() #进入新页面</span></span><br><span class="line"><span class="string">            tabs=dp.get_tabs()</span></span><br><span class="line"><span class="string">            tab=tabs[-1]</span></span><br><span class="line"><span class="string">            img=tab.ele(&#x27;css:#spec-img&#x27;).attr(&#x27;src&#x27;)</span></span><br><span class="line"><span class="string">            comment=tab.ele(&#x27;css:.comment-con&#x27;).text</span></span><br><span class="line"><span class="string">            tab.close()&#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="built_in">dict</span>=&#123;</span><br><span class="line">            <span class="string">&#x27;标题&#x27;</span>:title,</span><br><span class="line">            <span class="string">&#x27;价格&#x27;</span>:price,</span><br><span class="line">            <span class="string">&#x27;链接&#x27;</span>:href,</span><br><span class="line">            &#125;</span><br><span class="line">            csv_writer.writerow(<span class="built_in">dict</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    lis[<span class="number">0</span>].<span class="built_in">input</span>(Keys.RIGHT)</span><br></pre></td></tr></table></figure>



<h3 id="3-京东评论爬取（可接2使用）"><a href="#3-京东评论爬取（可接2使用）" class="headerlink" title="3.京东评论爬取（可接2使用）"></a>3.京东评论爬取（可接2使用）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 `with open` 自动管理文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data4.csv&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    csv_writer = csv.DictWriter(f, fieldnames=[<span class="string">&#x27;名称&#x27;</span>, <span class="string">&#x27;评论&#x27;</span>, <span class="string">&#x27;购买时间&#x27;</span>])</span><br><span class="line">    csv_writer.writeheader()</span><br><span class="line"></span><br><span class="line">    dp = ChromiumPage()</span><br><span class="line">    df = pd.read_csv(<span class="string">&#x27;data2.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;链接&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> df[<span class="string">&#x27;链接&#x27;</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                dp.get(url)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="comment"># 等待页面主要内容加载，选取一个确定会加载的元素</span></span><br><span class="line">                <span class="comment">#dp.wait.ele(&#x27;css:#detail&#x27;, timeout=10)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 滚动到底部，提高评论加载可能性</span></span><br><span class="line">                dp.scroll.to_bottom()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 确保“评论”选项卡可用后再点击</span></span><br><span class="line">                tab_element = dp.ele(<span class="string">&#x27;css:#detail &gt; div.tab-main.large &gt; ul &gt; li.current&#x27;</span>, timeout=<span class="number">5</span>)</span><br><span class="line">                <span class="keyword">if</span> tab_element:</span><br><span class="line">                    tab_element.click()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 监听网络请求，设置超时避免卡住</span></span><br><span class="line">                dp.listen.start(<span class="string">&#x27;pc_club_productPageComments&#x27;</span>)</span><br><span class="line">                r = dp.listen.wait(timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> r:</span><br><span class="line">                    json_data = r.response.body</span><br><span class="line">                    <span class="built_in">print</span>(json_data)</span><br><span class="line"></span><br><span class="line">                    comments = json_data.get(<span class="string">&#x27;comments&#x27;</span>, [])</span><br><span class="line">                    <span class="keyword">for</span> index <span class="keyword">in</span> comments:</span><br><span class="line">                        row_data = &#123;</span><br><span class="line">                            <span class="string">&#x27;名称&#x27;</span>: index.get(<span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>),</span><br><span class="line">                            <span class="string">&#x27;评论&#x27;</span>: index.get(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>),</span><br><span class="line">                            <span class="string">&#x27;购买时间&#x27;</span>: index.get(<span class="string">&#x27;referenceTime&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>),</span><br><span class="line">                        &#125;</span><br><span class="line">                        csv_writer.writerow(row_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;url&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
